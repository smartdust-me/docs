"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[347],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var r=i.createContext({}),p=function(e){var n=i.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(r.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,h=d["".concat(r,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(h,l(l({ref:n},c),{},{components:t})):i.createElement(h,l({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s[d]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6319:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var i=t(7462),a=(t(7294),t(3905));const o={},l="iOS CI-CD pipeline with Jenkins and Appium",s={unversionedId:"ios-appium",id:"ios-appium",title:"iOS CI-CD pipeline with Jenkins and Appium",description:"Simple example of what's needed to set up and run a CI-CD pipeline of an iOS application with Smartdust Lab.",source:"@site/docs/ios-appium.md",sourceDirName:".",slug:"/ios-appium",permalink:"/docs/docs/ios-appium",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ios-appium.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Smartdust CLI Client",permalink:"/docs/docs/cli-client"},next:{title:"Libimobiledevice installation guide",permalink:"/docs/docs/libimobiledevice"}},r={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Fastlane",id:"fastlane",level:3},{value:"Adding the Mac machine as a slave node",id:"adding-the-mac-machine-as-a-slave-node",level:3},{value:"Creating a pipeline",id:"creating-a-pipeline",level:3},{value:"Libimobiledevice tools",id:"libimobiledevice-tools",level:3},{value:"Smartdust CLI client",id:"smartdust-cli-client",level:3},{value:"Node.js (for Appium)",id:"nodejs-for-appium",level:3},{value:"go-ios toolchain",id:"go-ios-toolchain",level:3},{value:"How it works",id:"how-it-works",level:3},{value:"Appium client code",id:"appium-client-code",level:3},{value:"Important notes regarding Appium tests",id:"important-notes-regarding-appium-tests",level:3}],c={toc:p},d="wrapper";function u(e){let{components:n,...o}=e;return(0,a.kt)(d,(0,i.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ios-ci-cd-pipeline-with-jenkins-and-appium"},"iOS CI-CD pipeline with Jenkins and Appium"),(0,a.kt)("p",null,"Simple example of what's needed to set up and run a CI-CD pipeline of an iOS application with Smartdust Lab. ",(0,a.kt)("br",null),"\nThe pipeline involves: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"building the app from source,"),(0,a.kt)("li",{parentName:"ul"},"connecting to iOS devices on a Smartdust Lab instance,"),(0,a.kt)("li",{parentName:"ul"},"installing the built app package on the connected test devices,"),(0,a.kt)("li",{parentName:"ul"},"running an Appium server on Linux and connecting it to the iPhones,"),(0,a.kt)("li",{parentName:"ul"},"running an Appium test on test devices using a standard webdriverio Javascript client.")),(0,a.kt)("p",null,"All project files are available in a Github ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/jordus100/ios-example"},"repository")),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Mac OS machine "),(0,a.kt)("li",{parentName:"ul"},"Apple Developer account (active)"),(0,a.kt)("li",{parentName:"ul"},"Linux machine with preferably Ubuntu (technically you could do everything on the Mac, but we split responsibilities in this example)"),(0,a.kt)("li",{parentName:"ul"},"Being comfortable using Unix-like OS (command line, resolving issues)")),(0,a.kt)("h1",{id:"setting-up-ios-project-on-mac-xcode-fastlane"},"Setting up iOS project on Mac (XCode, Fastlane)"),(0,a.kt)("p",null,"First, you need to make sure your project in XCode builds and runs on simulators without any issues."),(0,a.kt)("p",null,"Then, you need to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"sd_remoteios")," tool from Smartdust to connect to iOS devices.\nFollow the instructions from ",(0,a.kt)("a",{parentName:"p",href:"/docs/docs/sd_remoteios"},"its documentation"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"You only need to connect to ONE connection URL and you will be instantly connected to every iOS device connected to the same provider.")),(0,a.kt)("p",null,"You should be able to select iOS devices from the Smartdust Lab instance in XCode to run your app on them.\nCheck if that works. You need to resolve any code signing issues that may arise.\n",(0,a.kt)("strong",{parentName:"p"},"Run your application on each and every device that you want to use for testing."),"\nFor simplicity's sake I used only automatic code signing and development builds in this example.\nYou might be in need of a more advanced setup."),(0,a.kt)("h3",{id:"fastlane"},"Fastlane"),(0,a.kt)("p",null,"Fastlane is a widely popular tool facilitating iOS building and deployment processes.\nDownload and get it running with the help of the ",(0,a.kt)("a",{parentName:"p",href:"https://docs.fastlane.tools/"},"official docs"),".\nYou need to install Ruby for Fastlane to work and please use Ruby version manager, ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rbenv/rbenv"},"rbenv"),"\nfor that. It will make things much easier down the road.\nI use fastlane only for building the app, nothing fancy. Here is my configuration file (",(0,a.kt)("em",{parentName:"p"},"fastfile"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'default_platform(:ios)\n\nplatform :ios do\n  desc "Simple build"\n  lane :build do\n    unlock_keychain(\n      path:"~/Library/Keychains/login.keychain-db",\n      password:"smart1986")\n    gym(\n      xcargs:"-allowProvisioningUpdates",\n      configuration:"Debug",\n      export_method:"development")\n  end\nend\n')),(0,a.kt)("p",null,"As you can see, I define only one ",(0,a.kt)("em",{parentName:"p"},"lane"),".\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"unlock_keychain")," action is necessary for running the builds via an SSH connection.\nOtherwise, the certificates needed for codesigning are locked and building fails.\nYour keychain ",(0,a.kt)("inlineCode",{parentName:"p"},"path"),' may be different, you need to look where the keychain with your codesigning certificates is.\nYou can view the certificates via the "Keychain" application.'),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"gym")," command just builds the app. "),(0,a.kt)("p",null,"The goal here is to be able to build your app via an SSH connection and running only one command in your project directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"bundle exec fastlane build\n")),(0,a.kt)("p",null,"where ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," is the lane name I chose."),(0,a.kt)("p",null,"After everything, upload your project to an online Git repository, if you haven't already."),(0,a.kt)("h1",{id:"setting-up-jenkins-server"},"Setting up Jenkins server"),(0,a.kt)("p",null,"I use a Linux machine for this part, however a Mac or even Windows should work too - you may need to make some adjustments.\nDownload and run the all-popular CI-CD automation software - ",(0,a.kt)("a",{parentName:"p",href:"https://www.jenkins.io/"},"Jenkins"),".\nAfter you have the server up and running, head to the web interface dashboard. "),(0,a.kt)("h3",{id:"adding-the-mac-machine-as-a-slave-node"},"Adding the Mac machine as a slave node"),(0,a.kt)("p",null,"You need to add the Mac machine that we set up in the earlier step as a Jenkins slave node.\nGo to ",(0,a.kt)("inlineCode",{parentName:"p"},"Manage Jenkins -> Nodes -> New Node")," and go through the wizard.\nIt's pretty straighforward given you have an SSH server already set up on your Mac.\nIf in trouble, there is plenty of online tutorials on how to do that.\nThe objective is to have your Mac machine displayed as available in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Nodes")," list on Jenkins."),(0,a.kt)("h3",{id:"creating-a-pipeline"},"Creating a pipeline"),(0,a.kt)("p",null,"Now go ahead and create a Jenkins pipeline through the web interface - ",(0,a.kt)("inlineCode",{parentName:"p"},"Dashboard -> New item -> Pipeline"),"\nThe configuration should be standard.\nSet the Pipeline definition to ",(0,a.kt)("inlineCode",{parentName:"p"},"Pipeline script from SCM.")," Enter your project repository credentials.\nPut ",(0,a.kt)("inlineCode",{parentName:"p"},"Jekinsfile")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Script path")," option.\nMy config looks like this:\n",(0,a.kt)("img",{src:t(3977).Z,width:"1060",height:"1778"})),(0,a.kt)("h1",{id:"setting-up-ci-cd-tools"},"Setting up CI-CD tools"),(0,a.kt)("p",null,'We need a computer to connect to iOS devices on Smartdust Lab, install the application on them and run Appium test.\nWe could set up another Jenkins slave node, but for simplicity I decided to go against best practices and use the "built-in"\nJenkins node - the same machine on which the server is running.'),(0,a.kt)("h3",{id:"libimobiledevice-tools"},"Libimobiledevice tools"),(0,a.kt)("p",null,"Install ",(0,a.kt)("inlineCode",{parentName:"p"},"libimobiledevice")," using the ",(0,a.kt)("a",{parentName:"p",href:"/docs/docs/libimobiledevice-install"},"instructions")),(0,a.kt)("h3",{id:"smartdust-cli-client"},"Smartdust CLI client"),(0,a.kt)("p",null,"Download, install and test run the Smartdust CLI client according to our ",(0,a.kt)("a",{parentName:"p",href:"/docs/docs/cli-client"},"tutorial"),".\nIt will enable Jenkins to headlessly connect to test devices."),(0,a.kt)("p",null,"You should be able to list connected iOS devices by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"idevice_id -l")," (from ",(0,a.kt)("inlineCode",{parentName:"p"},"libimobiledevice")," toolchain).\nAfter that, check if ",(0,a.kt)("inlineCode",{parentName:"p"},"ideviceinstaller")," works by installing your .ipa app on an iPhone connected via the Smartdust CLI client."),(0,a.kt)("h3",{id:"nodejs-for-appium"},"Node.js (for Appium)"),(0,a.kt)("p",null,"We will need to get Node installed for running the Appium server (and client in our case).\nPlease use Node Version Manager ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm"},"nvm")," for this. I recommend Node LTS version 18.16.1."),(0,a.kt)("h3",{id:"go-ios-toolchain"},"go-ios toolchain"),(0,a.kt)("p",null,"Another iOS toolchain that we'll use: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/danielpaulus/go-ios"},"repo"),". Install it via npm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"npm install -g go-ios\n")),(0,a.kt)("h1",{id:"creating-pipeline-script"},"Creating pipeline script"),(0,a.kt)("p",null,"Create a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"Jenkinsfile")," in the home directory of your project.\nThis is an example of this file for this project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"pipeline {\n    agent none\n    stages {\n        stage('Build app') {\n            agent { label 'mac' }\n            environment {\n                PATH=\"/Users/smartdust/.rbenv/shims:/usr/bin:/bin:/usr/sbin:/sbin\"\n            }\n            steps {\n                checkout scm\n                sh 'gem install bundler' //fastlane setup\n                sh 'bundle install'\n                sh 'bundle exec fastlane build'\n                stash includes: 'Kalculator.ipa', name: 'BUILT_IPA'\n            }\n        }\n        stage('Connect to iPhones') {\n            agent { label 'inbuilt' }\n            environment {\n                SD_URL = 'https://staging.smartdust.me'\n                SD_TOKEN = 'a534c80c572442689dd560c4bc34921ce441781b34434f5bb02b062424a89fee'\n            }\n            steps {\n                sh 'smartdust-client disconnect --all'\n                sh 'smartdust-client connect --all -f platform:iOS'\n            }\n        }\n        stage('Install app on iPhones') {\n            agent { label 'inbuilt' }\n            environment {\n                APP_PATH = 'Kalculator.ipa'\n            }\n            steps {\n                unstash 'BUILT_IPA'\n                sh 'ideviceinstaller -u c81fadec2a2affb46093bb3036cf1f49db2dc187 install $APP_PATH'\n                sh 'ideviceinstaller -u 25c925bfbb0ed425fa7c4e30d62b6be82fe15298 install $APP_PATH'\n            }\n        }\n        stage('Appium test') {\n            agent { label 'inbuilt' }\n            environment {\n                PATH = '/home/smartdust/.nvm/versions/node/v18.16.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\n                SD_URL = 'https://staging.smartdust.me'\n                SD_TOKEN = 'a534c80c572442689dd560c4bc34921ce441781b34434f5bb02b062424a89fee'\n            }\n            steps {\n                dir('client') {\n                    sh 'npm install'\n                    sh 'npx appium &'\n                    sh 'ios --udid=25c925bfbb0ed425fa7c4e30d62b6be82fe15298 forward 7777 8100&'\n                    sh 'ios --udid=c81fadec2a2affb46093bb3036cf1f49db2dc187 forward 7778 8100&'\n                    sh 'sleep 10'\n                    sh 'node test.js'\n                }\n                sh 'smartdust-client disconnect --all'\n            }\n        }\n    }\n\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Change the agent labels to match your Jenkins nodes config"),(0,a.kt)("li",{parentName:"ul"},"Change SD_URL and SD_TOKEN variables to your own"),(0,a.kt)("li",{parentName:"ul"},"The PATH environment variables being set uses a bit dirty trick that points to a version of Ruby and Node installed by ",(0,a.kt)("inlineCode",{parentName:"li"},"rbenv")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"nvm"),"."),(0,a.kt)("li",{parentName:"ul"},"Note that when I call ",(0,a.kt)("inlineCode",{parentName:"li"},"smartdust-client"),", I use the ",(0,a.kt)("inlineCode",{parentName:"li"},"--all")," flag.",(0,a.kt)("br",{parentName:"li"}),"The reason is that in my case, all iPhones on my Smartdust Lab instance are connected to the same provider, so this is fine.\nYou wouldn't be able to connect to all devices if they were connected via different providers,\nthe tool would try for a long time and fail.")),(0,a.kt)("h1",{id:"appium-test"},"Appium test"),(0,a.kt)("p",null,'The last stage of the pipeline above is an Appium test.\nIt\'s a Node project in a subfolder "client" in my project repository. You can go ahead and copy it.\nIt declares dependencies on Appium and XCUITest iOS driver.'),(0,a.kt)("h3",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,"Appium server communicates with iOS devices using a proxy app called ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/facebookarchive/WebDriverAgent"},"WebDriverAgent"),".\nIt runs an infinite XCUITest (iOS test framework) test case on the device and listens to WebDriver commands in W3C specification format.\nThen it translates WebDriver commands to native XC Test commands and runs them on the device.\nWe need to forward each device's WDA port to a localhost port for communication.\nThis is executed via the go-ios tool in lines 34 and 35 of my Jenkinsfile.\nI recommend doing all pipeline steps manually to make sure everything works."),(0,a.kt)("h3",{id:"appium-client-code"},"Appium client code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const wdio = require(\"webdriverio\");\n\nconst sharedCapabilities = {\n    'appium:automationName': 'XCUITest',\n    'platformName': 'iOS',\n    'appium:usePrebuiltWDA': true,\n}\nconst devicesCapabilities = [{\n    'appium:udid': '25c925bfbb0ed425fa7c4e30d62b6be82fe15298',\n    'appium:webDriverAgentUrl': 'http://localhost:7777'\n}, {\n    'appium:udid': 'c81fadec2a2affb46093bb3036cf1f49db2dc187',\n    'appium:webDriverAgentUrl': 'http://localhost:7778'\n}]\nconst opts = {\n    path: '/',\n    port: 4723,\n    //maxInstances: 1,\n};\n\nasync function main() {\n    clients = []\n    for(i=0; i<devicesCapabilities.length; i++){\n        opts.capabilities = {...sharedCapabilities, ...devicesCapabilities[i]}\n        clients[i] = await wdio.remote(opts)\n    }\n    for (const client of clients) {\n        await client.activateApp(\"jog.Kalculator\")\n        const elem = await client.$('~clearButton') // accessibility ID\n        await elem.click()\n        client.pause(2000)\n        await elem.click()\n        await client.deleteSession()\n    }\n}\n\nmain();\n")),(0,a.kt)("p",null,"There are other Appium WebDriver clients in other programming languages, they work analogously."),(0,a.kt)("p",null,"For explanation of each capability, visit the XCUITest driver ",(0,a.kt)("a",{parentName:"p",href:"https://appium.github.io/appium-xcuitest-driver/4.32/"},"documentation website")),(0,a.kt)("p",null,"Note that in this example an element is located using its accessibility ID.\nThis is great as this type of reference doesn't change with localization, but what's even more important\nis that you can assign accessibility IDs in Android apps as well. In result, you can write ",(0,a.kt)("strong",{parentName:"p"},"cross-platform tests")," which\nsaves you time and hassle."),(0,a.kt)("h3",{id:"important-notes-regarding-appium-tests"},"Important notes regarding Appium tests"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'Your tests may fail if there is a system overlay pop-up currently displaying on top of everything.\nE.g. "Log in to Apple ID".')))}u.isMDXComponent=!0},3977:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/pipeline-config-25a427bfec095a42026da75804b4b3bc.png"}}]);