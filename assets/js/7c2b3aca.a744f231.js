"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6472],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>p});var n=i(7294);function l(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){l(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function a(e,t){if(null==e)return{};var i,n,l=function(e,t){if(null==e)return{};var i,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(l[i]=e[i]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(l[i]=e[i])}return l}var c=n.createContext({}),s=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=s(i),m=l,p=u["".concat(c,".").concat(m)]||u[m]||b[m]||o;return i?n.createElement(p,r(r({ref:t},d),{},{components:i})):n.createElement(p,r({ref:t},d))}));function p(e,t){var i=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=i.length,r=new Array(o);r[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:l,r[1]=a;for(var s=2;s<o;s++)r[s]=i[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},4971:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>b,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var n=i(7462),l=(i(7294),i(3905));const o={},r="Libimobiledevice installation guide",a={unversionedId:"libimobiledevice",id:"libimobiledevice",title:"Libimobiledevice installation guide",description:"libimobiledevice is a library and tool suite designed to enable communication with iOS",source:"@site/docs/libimobiledevice.md",sourceDirName:".",slug:"/libimobiledevice",permalink:"/docs/docs/libimobiledevice",draft:!1,editUrl:"https://github.com/smartdust-me/docs/blob/main/docs/libimobiledevice.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"iOS Remote Debugging",permalink:"/docs/docs/ios-remote-debug"},next:{title:"sd_remoteios - iOS Remote Connect tool",permalink:"/docs/docs/sd_remoteios"}},c={},s=[],d={toc:s},u="wrapper";function b(e){let{components:t,...i}=e;return(0,l.kt)(u,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"libimobiledevice-installation-guide"},"Libimobiledevice installation guide"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://libimobiledevice.org/"},"libimobiledevice")," is a library and tool suite designed to enable communication with iOS\ndevices on any operating system. Unfortunately, we need the latest versions and that can only be done by building from source.\nThe following manual was written with Ubuntu OS in mind, but it should work on most Linux OS's.\nIf in doubt, consult the README's in the Github repositories of the projects."),(0,l.kt)("p",null,"Install libimobiledevice depenencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"sudo apt-get install \\\n    python3-dev \\\n    build-essential \\\n    checkinstall \\\n    git \\\n    autoconf \\\n    automake \\\n    libtool-bin \\\n    pkg-config \\\n    libplist-dev \\\n    libzip-dev \\\n    usbmuxd \\\n    libusbmuxd-dev \\\n    libssl-dev \\\n    ifuse\n")),(0,l.kt)("p",null,"Install libplist"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone https://github.com/libimobiledevice/libplist.git\ncd libplist\n\n./autogen.sh\nmake\nsudo make install\n\ncd ..\nrm -rf libplist\n")),(0,l.kt)("p",null,"Install libimobiledevice-glue"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone https://github.com/libimobiledevice/libimobiledevice-glue.git\ncd libimobiledevice-glue\n\n./autogen.sh\nmake\nsudo make install\n\ncd ..\nrm -rf libimobiledevice-glue\n")),(0,l.kt)("p",null,"Install libusbmuxd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone https://github.com/libimobiledevice/libusbmuxd.git\ncd libusbmuxd\n\n./autogen.sh\nmake\nsudo make install\n\ncd ..\nrm -rf libusbmuxd\n")),(0,l.kt)("p",null,"Install libimobiledevice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone https://github.com/libimobiledevice/libimobiledevice.git\ncd libimobiledevice\n\n./autogen.sh\nmake\nsudo make install\n\ncd ..\nrm -rf libimobiledevice\n")),(0,l.kt)("p",null,"Install ideviceinstaller"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"git clone https://github.com/libimobiledevice/ideviceinstaller.git\ncd ideviceinstaller\n\n./autogen.sh\nmake\nsudo make install\n\ncd ..\nrm -rf ideviceinstaller\n")))}b.isMDXComponent=!0}}]);