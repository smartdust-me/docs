"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1135],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||s;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1015:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const s={id:"api-access",title:"SmartDust Lab REST API access",sidebar_position:1},o="SmartDust Lab REST API access",i={unversionedId:"REST API/api-access",id:"REST API/api-access",title:"SmartDust Lab REST API access",description:"Every SmartDust Lab instance exposes a REST API that allows you to access the system programmatically.",source:"@site/docs/REST API/api-access.md",sourceDirName:"REST API",slug:"/REST API/api-access",permalink:"/docs/docs/REST API/api-access",draft:!1,editUrl:"https://github.com/smartdust-me/docs/blob/main/docs/REST API/api-access.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"api-access",title:"SmartDust Lab REST API access",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Parallel testing Android apps using a remote testing platform and Appium",permalink:"/docs/docs/Parallel testing Android apps using a remote testing platform and Appium"},next:{title:"Connecting to devices remotely via REST API",permalink:"/docs/docs/REST API/api-remote-debug"}},c={},l=[{value:"Authentication",id:"authentication",level:2},{value:"Generating an access key",id:"generating-an-access-key",level:2}],p={toc:l},u="wrapper";function m(e){let{components:t,...s}=e;return(0,r.kt)(u,(0,a.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"smartdust-lab-rest-api-access"},"SmartDust Lab REST API access"),(0,r.kt)("p",null,"Every SmartDust Lab instance exposes a REST API that allows you to access the system programmatically.\nIt enables integration with other systems and workflows, providing ways to retrieve information and perform actions.\nFor example, the API can be used in a CI/CD pipeline to automate the process of running tests on devices."),(0,r.kt)("h1",{id:"documentation"},"Documentation"),(0,r.kt)("p",null,"The main documentation for the REST API is available in a Swagger JSON format at: ",(0,r.kt)("inlineCode",{parentName:"p"},"https://[your-instance-name].smartdust.me/api/v1/swagger.json"),"."),(0,r.kt)("h2",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"The API uses a Bearer token for authentication.\nTo access the API, you need to generate an access key."),(0,r.kt)("h2",{id:"generating-an-access-key"},"Generating an access key"),(0,r.kt)("p",null,"Log in to your SmartDust Lab instance in your web browser.\nClick \u201cSettings\u201d on the upper menu bar:\n",(0,r.kt)("img",{src:n(7964).Z,width:"612",height:"168"})),(0,r.kt)("p",null,"Then go to the \u201cKeys\u201d tab and in the \u201cAccess Tokens\u201d pane click on the \u201c+\u201d icon on the right.\n",(0,r.kt)("img",{src:n(7185).Z,width:"952",height:"420"}),"\nName your token however you like and after clicking \u201cGenerate New Token\u201d your token will be displayed as a string of characters.\nCopy it and keep it somewhere you\u2019ll have access to."))}m.isMDXComponent=!0},7185:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/access-token-settings-1ca7d9a705f344d1387cf3491a59195e.png"},7964:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/upper-menu-settings-9841a4f9918f85049f9d9e826b568c33.png"}}]);