"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2614],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return n?i.createElement(h,r(r({ref:t},d),{},{components:n})):i.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7462),o=(n(7294),n(3905));const a={},r="Smartdust CLI Client",l={unversionedId:"cli-client",id:"cli-client",title:"Smartdust CLI Client",description:"Description",source:"@site/docs/cli-client.md",sourceDirName:".",slug:"/cli-client",permalink:"/docs/cli-client",draft:!1,editUrl:"https://github.com/smartdust-me/docs/blob/main/docs/cli-client.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Automated tests (CI/CD) in Smartdust Lab",permalink:"/docs/automated-android-tests"},next:{title:"iOS Appium tests",permalink:"/docs/ios-appium-tests"}},s={},c=[{value:"Description",id:"description",level:3},{value:"Installation",id:"installation",level:2},{value:"Quick device connecting tutorial",id:"quick-device-connecting-tutorial",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Getting a Lab connection token",id:"getting-a-lab-connection-token",level:3},{value:"Setting your Lab token and URL as environmental variables",id:"setting-your-lab-token-and-url-as-environmental-variables",level:3},{value:"Connecting to Android devices",id:"connecting-to-android-devices",level:2},{value:"Connecting to a device for the first time",id:"connecting-to-a-device-for-the-first-time",level:3},{value:"Connecting to iOS devices",id:"connecting-to-ios-devices",level:2},{value:"Disconnecting from the devices",id:"disconnecting-from-the-devices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...a}=e;return(0,o.kt)(u,(0,i.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"smartdust-cli-client"},"Smartdust CLI Client"),(0,o.kt)("h3",{id:"description"},"Description"),(0,o.kt)("p",null,"Smartdust CLI client is a tool that enables connecting to devices present in Smartdust Lab instances via ADB (Android) and usbfluxd (iOS) through the command line.\nThis in turn allows for automation of development/testing/etc. processes as connecting to devices can be done entirely in terminal script environments without touching the web UI interface.\nIt enables usage of CI/CD tools such as Jenkins."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Install ",(0,o.kt)("a",{parentName:"p",href:"https://www.ruby-lang.org/en/downloads/"},"Ruby"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Then you can install Smartdust CLI client as a Ruby gem:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre"},"  sudo gem install smartdust-client\n")))),(0,o.kt)("h2",{id:"quick-device-connecting-tutorial"},"Quick device connecting tutorial"),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An account that you can log in to a Smartdust Lab with - you can make one by visiting ",(0,o.kt)("a",{parentName:"li",href:"public.smartdust.me"},"public.smartdust.me")),(0,o.kt)("li",{parentName:"ul"},"Using a Linux OS and having basic knowledge regarding using the terminal - using Bash or zsh is recommended"),(0,o.kt)("li",{parentName:"ul"},"Android:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"ADB installed and working"))),(0,o.kt)("li",{parentName:"ul"},"iOS:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/libimobiledevice/usbmuxd"},"usbmuxd")," installed"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/docs/sd_remoteios"},"sd_remoteios")," installed (needs to be in your PATH)"),(0,o.kt)("li",{parentName:"ul"},"libimobiledevice installed - use the ",(0,o.kt)("a",{parentName:"li",href:"/docs/docs/libimobiledevice"},"instructions")," (idevice_id program needs to be in your PATH)")))),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"A Smartdust account with administrator privileges cannot be used with this tool, it doesn\u2019t work!")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You cannot reuse the same ADB key in another Smartdust account. ")),(0,o.kt)("p",null,"Steps:"),(0,o.kt)("p",null,"Follow the installation instructions from above and make sure that the client is installed properly by invoking"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smartdust-client\n")),(0,o.kt)("p",null,"in your terminal window. You should see a description of the tool\u2019s options."),(0,o.kt)("h3",{id:"getting-a-lab-connection-token"},"Getting a Lab connection token"),(0,o.kt)("p",null,"Obtain a Smartdust Lab connection token from a Smartdust Lab instance - for example at public.smartdust.me.\nAfter logging in, click \u201cSettings\u201d on the upper menu bar:\n",(0,o.kt)("img",{src:n(7964).Z,width:"612",height:"168"})),(0,o.kt)("p",null,"Then go to the \u201cKeys\u201d tab and in the \u201cAccess Tokens\u201d pane click on the \u201c+\u201d icon on the right.\n",(0,o.kt)("img",{src:n(7185).Z,width:"952",height:"420"}),"\nName your token however you like and after clicking \u201cGenerate New Token\u201d your token will be displayed as a string of characters.\nCopy it and keep it somewhere you\u2019ll have access to."),(0,o.kt)("p",null,"Go back to the main view of the Lab, for example by clicking on the Smartdust logo in the upper left corner."),(0,o.kt)("h3",{id:"setting-your-lab-token-and-url-as-environmental-variables"},"Setting your Lab token and URL as environmental variables"),(0,o.kt)("p",null,"Let\u2019s bring the terminal back to view again. We\u2019ll need to set some environmental variables - the token you just copied and the URL of the Smartdust Lab.\nThis is roughly described by the tool itself when you type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smartdust-client -h\n")),(0,o.kt)("p",null,"Instead of using environmental variables we can just pass appropriate flags when interacting with the client but for the purposes of this tutorial let\u2019s proceed with the former."),(0,o.kt)("p",null,"Setting the variables we need in a Bash or zsh shell goes as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export SD_TOKEN=your_copied_token\nexport SD_URL=https://public.smartdust.me\n")),(0,o.kt)("p",null,"It might differ if you\u2019re using a different shell, check for suitable instructions online."),(0,o.kt)("p",null,"As you can see, the Smartdust Lab URL must be passed in the full, including the ",(0,o.kt)("inlineCode",{parentName:"p"},"https://")," protocol signifier.\nHowever, don\u2019t add any trailing characters after the domain name of the Lab which might be displayed in your browser."),(0,o.kt)("h2",{id:"connecting-to-android-devices"},"Connecting to Android devices"),(0,o.kt)("h3",{id:"connecting-to-a-device-for-the-first-time"},"Connecting to a device for the first time"),(0,o.kt)("p",null,"Keep the web UI interface of the Smartdust Lab open in your browser and in the terminal window use the freshly installed Smartdust CLI client like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smartdust-client connect --min=1 -n 1 -f group.type:free ready:true platform:Android\n")),(0,o.kt)("p",null,"That\u2019s for free public.smartdust.me users, so this command should work for everyone. If you\u2019re a premium user and/or working on a private instance, you should omit the ",(0,o.kt)("inlineCode",{parentName:"p"},"group type")," filter, like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smartdust-client connect --min=1 -n 1 -f ready:true platform:Android\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If that\u2019s the first time you\u2019re connecting to a Smartdust Lab device using ADB, a popup should now appear in the web interface, prompting you to add a new ADB key. Confirm it and run the above command again.")),(0,o.kt)("p",null,"It is recommended to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ready:true platform:Android")," filtering keys when connecting to public.smartdust.me, otherwise the tool will try to connect to unavailable devices and take a long time or even fail."),(0,o.kt)("p",null,"It is highly advisable to use both --min and -n arguments and set them to the same value."),(0,o.kt)("p",null,"That\u2019s it, the tool should now connect you to an available Lab device via ADB! After it finishes its work, check"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"adb devices\n")),(0,o.kt)("p",null,"and the device should be available for you to use via ADB!"),(0,o.kt)("p",null,"If you want to connect to more devices and/or use particular types of devices, use the -h flag to find out more about a given command. For example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smartdust-client connect -h\n")),(0,o.kt)("h2",{id:"connecting-to-ios-devices"},"Connecting to iOS devices"),(0,o.kt)("p",null,"When connecting to iOS devices, Smartdust CLI heavily depends on a couple of external dependencies.\nYou need to make sure that ",(0,o.kt)("inlineCode",{parentName:"p"},"usbmuxd")," service works by typing:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo systemctl start usbmuxd\n")),(0,o.kt)("p",null,"and check if it\u2019s running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo systemctl status usbmuxd\n")),(0,o.kt)("p",null,"You also need to install ","[",(0,o.kt)("inlineCode",{parentName:"p"},"sd_remoteios"),"]"," for your OS.\nPut it in your PATH so that you can call it just like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sd_remoteios\n")),(0,o.kt)("p",null,"Also, verify if ",(0,o.kt)("inlineCode",{parentName:"p"},"idevice_id")," is working:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"idevice_id\n")),(0,o.kt)("p",null,"To be sure that so far everything\u2019s fine, you can go ahead to Smartdust Lab, pick a free iOS device and copy the command for Remote Debug:\n",(0,o.kt)("img",{src:n(724).Z,width:"669",height:"228"})),(0,o.kt)("p",null,"Paste it in your terminal and hit enter. It should say that you are connected successfully."),(0,o.kt)("p",null,"In another terminal window type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ideviceinfo\n")),(0,o.kt)("p",null,"If a bunch of properties are printed on the screen, congratulations! That was the hardest part."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"We advise to read the ",(0,o.kt)("a",{parentName:"p",href:"/docs/docs/sd_remoteios"},(0,o.kt)("inlineCode",{parentName:"a"},"sd_remoteios")," documentation")," for better understanding.")),(0,o.kt)("p",null,"To connect to an iOS device in a Smartdust Lab instance, you can copy its serial number and execute the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smartdust-client connect -f serial:adeb2bc11f101da2a3de1d0c52a2f32b474f5127\n")),(0,o.kt)("p",null,"You should of course put the serial of your device after the colon."),(0,o.kt)("p",null,"That\u2019s it! You can confirm the connected devices by listing them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"idevice_id -l\n")),(0,o.kt)("p",null,"It can surprise you, but you can have more than one device on the list. Due to the current connection mechanism, you get connected to all the iOS devices from one provider."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"As for now, ",(0,o.kt)("inlineCode",{parentName:"p"},"sd_remoteios")," and consequently Smartdust CLI Client can only connect to iOS devices connected to one provider at the same time.\nIf you, for example, try to connect to all devices and they are connected to different providers, Smartdust CLI Client will fail.")),(0,o.kt)("h2",{id:"disconnecting-from-the-devices"},"Disconnecting from the devices"),(0,o.kt)("p",null,"In order to disconnect from all devices, both via ADB, ",(0,o.kt)("inlineCode",{parentName:"p"},"sd_remoteios")," and also to free them in the Lab, use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"smartdust-client disconnect --all\n")),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"On a rare occasion that different users will start the Smartdust CLI Client on the same device, there might be a permission issue with some temporary files the program creates.\nIn that case, forcefully delete the ",(0,o.kt)("inlineCode",{parentName:"p"},"/tmp/stf.log")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/tmp/stf.pid")," files.")))}p.isMDXComponent=!0},7185:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/access-token-settings-1ca7d9a705f344d1387cf3491a59195e.png"},724:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/remote-debug-96ea314431546380a0236092af32a0fe.png"},7964:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/upper-menu-settings-9841a4f9918f85049f9d9e826b568c33.png"}}]);